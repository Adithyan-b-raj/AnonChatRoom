<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Room {{roomId}}</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="chat-container">
        <header class="chat-header">
            <div class="room-info">
                <h2>Room: {{roomId}}</h2>
                <span id="userCount">0 users online</span>
            </div>
            <div class="controls">
                <button id="leaveBtn" class="btn-secondary">Leave Room</button>
            </div>
        </header>
        
        <div class="chat-area">
            <div id="messages" class="messages"></div>
            <div id="typingIndicator" class="typing-indicator"></div>
        </div>
        
        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="Type your message..." maxlength="500">
            <button id="sendBtn" class="btn-primary">Send</button>
        </div>
    </div>
    
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const roomId = '{{roomId}}';
        const username = sessionStorage.getItem('username') || 'Anonymous';
        
        const messagesDiv = document.getElementById('messages');
        const messageInput = document.getElementById('messageInput');
        const sendBtn = document.getElementById('sendBtn');
        const userCountSpan = document.getElementById('userCount');
        const typingIndicator = document.getElementById('typingIndicator');
        const leaveBtn = document.getElementById('leaveBtn');
        
        let typingTimer;
        let isTyping = false;
        
        // Join the room
        socket.emit('join-room', { roomId, username });
        
        // Listen for messages
        socket.on('message', (data) => {
            addMessage(data, 'message');
        });
        
        // Listen for previous messages
        socket.on('previous-messages', (messages) => {
            messages.forEach(msg => addMessage(msg, 'message'));
            scrollToBottom();
        });
        
        // Listen for user events
        socket.on('user-joined', (data) => {
            addMessage(data, 'system');
        });
        
        socket.on('user-left', (data) => {
            addMessage(data, 'system');
        });
        
        // Update user count
        socket.on('user-count', (count) => {
            userCountSpan.textContent = `${count} user${count !== 1 ? 's' : ''} online`;
        });
        
        // Handle typing indicators
        socket.on('user-typing', (data) => {
            if (data.isTyping) {
                typingIndicator.textContent = `${data.username} is typing...`;
            } else {
                typingIndicator.textContent = '';
            }
        });
        
        function addMessage(data, type) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}`;
            
            if (type === 'system') {
                messageDiv.innerHTML = `
                    <span class="system-message">${data.message}</span>
                    <span class="timestamp">${data.timestamp}</span>
                `;
            } else {
                const isOwnMessage = data.username === username;
                messageDiv.className += isOwnMessage ? ' own' : '';
                messageDiv.innerHTML = `
                    <div class="message-header">
                        <span class="username">${data.username}</span>
                        <span class="timestamp">${data.timestamp}</span>
                    </div>
                    <div class="message-content">${escapeHtml(data.message)}</div>
                `;
            }
            
            messagesDiv.appendChild(messageDiv);
            scrollToBottom();
        }
        
        function scrollToBottom() {
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }
        
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        function sendMessage() {
            const message = messageInput.value.trim();
            if (message) {
                socket.emit('new-message', { message });
                messageInput.value = '';
                
                // Stop typing indicator
                if (isTyping) {
                    socket.emit('typing', { isTyping: false });
                    isTyping = false;
                }
            }
        }
        
        // Send message on button click
        sendBtn.addEventListener('click', sendMessage);
        
        // Send message on Enter key
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        // Typing indicator
        messageInput.addEventListener('input', () => {
            if (!isTyping) {
                socket.emit('typing', { isTyping: true });
                isTyping = true;
            }
            
            clearTimeout(typingTimer);
            typingTimer = setTimeout(() => {
                socket.emit('typing', { isTyping: false });
                isTyping = false;
            }, 1000);
        });
        
        // Leave room
        leaveBtn.addEventListener('click', () => {
            if (confirm('Are you sure you want to leave this chat room?')) {
                window.location.href = '/';
            }
        });
        
        // Handle page unload
        window.addEventListener('beforeunload', () => {
            socket.disconnect();
        });
        
        // Focus message input
        messageInput.focus();
    </script>
</body>
</html>